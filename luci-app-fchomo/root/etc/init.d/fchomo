#!/bin/sh /etc/rc.common

. "${IPKG_INSTROOT}/lib/functions/network.sh"

USE_PROCD=1

START=99
STOP=10

CONF="fchomo"
PROG="/usr/bin/mihomo"

HM_DIR="/etc/fchomo"
TEMPS_DIR="$HM_DIR/templates"
RUN_DIR="/var/run/fchomo"
LOG_PATH="$RUN_DIR/fchomo.log"
DNSMASQ_DIR="/tmp/dnsmasq.d/dnsmasq-fchomo.d"

config_load "$CONF"

# define global var: DEF_WAN DEF_WAN6 NIC_* NIC6_*
define_nic() {
	local dev sub addr
	# get all active NICs
	for dev in $(ls /sys/class/net/); do
		#ipv4
		sub=$(ip -o -4 addr|sed -En "s|.*${dev}\s+inet\s+([0-9\./]+).*|\1|gp")
		eval "NIC_${dev//[[:punct:]]/_}=\"\$sub\""
		#ipv6
		sub=$(ip -o -6 addr|sed -En "s|.*${dev}\s+inet6\s+([A-Za-z0-9\./:]+).*|\1|gp")
		# ref: https://github.com/openwrt/openwrt/blob/main/package/base-files/files/lib/functions/network.sh#L53 #network_get_subnet6()
		for _ in $sub; do
			for addr in $sub; do
				case "$addr" in fe[8ab]?:*|f[cd]??:*)
					continue
				esac
				sub=$addr; break
			done
			# Attempt to return first non-fe80::/10 range
			for addr in $sub; do
				case "$addr" in fe[8ab]?:*)
					continue
				esac
				sub=$addr; break
			done
			# Return first item
			for addr in $sub; do
				sub=$addr; break
			done
		done
		eval "NIC6_${dev//[[:punct:]]/_}=\"\$sub\""
	done
	# get default gateway 0.0.0.0/::
	network_find_wan DEF_WAN true
	network_find_wan6 DEF_WAN6 true

	return 0
}
define_nic

load_interfaces() {
	local bind_ifname
	config_get bind_ifname "$1" "bind_interface"

	interfaces=" $(uci -q show network|grep "device='$bind_ifname'"|cut -f2 -d'.') $interfaces"
}

log() {
	echo -e "$(date "+%Y-%m-%d %H:%M:%S") [DAEMON] $*" >> "$LOG_PATH"
}

start_service() {
	local default_proxy
	config_get default_proxy "global" "default_proxy" ""

	local server_enabled
	config_get_bool server_enabled "global" "server_enabled" "0"

	if [ -z "$default_proxy" -a "$server_enabled" = "0" ]; then
		return 1
	fi

	mkdir -p "$RUN_DIR"

	# Client
	if [ -n "$default_proxy" ]; then
	if [ -z "$1" -o "$1" = "mihomo-c" ]; then
		# Generate/Validate client config
		ucode -S "$HM_DIR/scripts/generate_client.uc" 2>>"$LOG_PATH" | yq -Poy | yq \
			'.sniffer["force-domain"][] style="double"
			| .sniffer["skip-domain"][] style="double"
			| with(.dns["nameserver-policy"] | keys; .. style="double")
			| .dns["fallback-filter"].domain[] style="double"' \
		> "$RUN_DIR/mihomo-c.yaml"
		yq eval-all -i '. as $item ireduce ({}; . * $item )' "$RUN_DIR/mihomo-c.yaml" "$TEMPS_DIR/"*.yaml

		if [ ! -e "$RUN_DIR/mihomo-c.yaml" ]; then
			log "Error: failed to generate client configuration."
			return 1
		elif ! "$PROG" -t -d "$HM_DIR" -f "$RUN_DIR/mihomo-c.yaml" >/dev/null 2>>"$LOG_PATH"; then
			log "Error: wrong client configuration detected."
			return 1
		fi
		echo > "$RUN_DIR/mihomo-c.log"

		# Deploy Clash API Dashboard
		local dashboard_repo
		config_get dashboard_repo "api" "dashboard_repo" ""

		if [ -n "$dashboard_repo" -a ! -d "$RUN_DIR/ui" ]; then
			tar -xzf "$HM_DIR/resources/$(echo "$dashboard_repo" | sed 's|\W|_|g').tgz" -C "$RUN_DIR/"
			mv "$RUN_DIR/"*-gh-pages/ "$RUN_DIR/ui/"
		fi

		# DNSMasq servers
		local ipv6 dns_ipv6
		config_get_bool ipv6 "global" "ipv6" "1"
		config_get_bool dns_ipv6 "dns" "ipv6" "1"
		local dns_port tcp_dns_port
		config_get dns_port "dns" "port" "7853"
		config_get tcp_dns_port "inbound" "tunnel_port" "7893"

		mkdir -p "$DNSMASQ_DIR"
		echo -e "conf-dir=$DNSMASQ_DIR" > "$DNSMASQ_DIR/../dnsmasq-fchomo.conf"
		cat <<-EOF >> "$DNSMASQ_DIR/redirect-dns.conf"
			no-poll
			no-resolv
			server=127.0.0.1#$dns_port
		EOF

		/etc/init.d/dnsmasq reload >/dev/null 2>&1

		# mihomo (client)
		procd_open_instance "mihomo-c"

		procd_set_param command /bin/sh
		procd_append_param command -c "'$PROG' -d '$HM_DIR' -f '$RUN_DIR/mihomo-c.yaml' >> '$RUN_DIR/mihomo-c.log' 2>&1"

		# Only supports `Global`` and does not support `Proxy Group` and `Proxy Node`
		local bind_ifname
		config_get_bool bind_ifname "routing" "bind_interface"

		if [ -n "$bind_ifname" ]; then
			procd_append_param netdev "$bind_ifname"
		else
			local ifname
			network_get_device ifname "$DEF_WAN" && procd_append_param netdev "$ifname"
			network_get_device ifname "$DEF_WAN6" && procd_append_param netdev "$ifname"
		fi
		procd_set_param netdev "br-lan"

		#procd_set_param capabilities "/etc/capabilities/fchomo.json"
		#procd_set_param user mihomo
		#procd_set_param group mihomo

		procd_set_param limits core="unlimited"
		procd_set_param limits nofile="1000000 1000000"
		procd_set_param stderr 1
		procd_set_param respawn

		procd_close_instance
	fi
	fi

	# Server
	if [ "$server_enabled" = "1" ]; then
	if [ -z "$1" -o "$1" = "mihomo-s" ]; then
		echo > "$RUN_DIR/mihomo-s.log"
	fi
	fi

	# log-cleaner
	procd_open_instance "log-cleaner"
	procd_set_param command "$HM_DIR/scripts/clean_log.sh"
	procd_set_param respawn
	procd_close_instance

	log "$(mihomo -v | awk 'NR==1{print $1,$3}') started."
}

stop_service() {
	# Client
	[ -z "$1" -o "$1" = "mihomo-c" ] && stop_client
	# Server
	[ -z "$1" -o "$1" = "mihomo-s" ] && stop_server
	return 0
}

stop_client() {
	# Remove DNSMasq servers
	rm -rf "$DNSMASQ_DIR/../dnsmasq-fchomo.conf" "$DNSMASQ_DIR"
	/etc/init.d/dnsmasq reload >/dev/null 2>&1

	# Remove Clash API Dashboard
	rm -rf "$RUN_DIR/ui"

	# Remove client config
	rm -f "$RUN_DIR/mihomo-c.yaml" "$RUN_DIR/mihomo-c.log"

	log "Service mihomo-c stopped."
}

stop_server() {
	# Remove server config
	rm -f "$RUN_DIR/mihomo-s.yaml" "$RUN_DIR/mihomo-s.log"

	log "Service mihomo-s stopped."
}

service_stopped() {
	# Client
	[ -n "$(/etc/init.d/$CONF info | jsonfilter -q -e '@.'"$CONF"'.instances["mihomo-c"]')" ] || client_stopped
	# Server
	return 0
}

client_stopped() {
	return 0
}

server_stopped() {
	return 0
}

reload_service() {
	log "Reloading service${1:+ $1}..."

	stop  "$@"
	start "$@"
}

service_triggers() {
	procd_add_reload_trigger "$CONF" 'network'

	local interfaces

	# Only supports `Global`` and does not support `Proxy Group` and `Proxy Node`
	load_interfaces 'routing'
	[ -n "$interfaces" ] && {
		for n in $interfaces; do
			procd_add_reload_interface_trigger $n
		done
	} || {
		for n in $DEF_WAN $DEF_WAN6; do
			procd_add_reload_interface_trigger $n
		done
	}

	interfaces=$(uci show network|grep "device='br-lan'"|cut -f2 -d'.')
	[ -n "$interfaces" ] && {
		for n in $interfaces; do
			procd_add_reload_interface_trigger $n
		done
	}
}
