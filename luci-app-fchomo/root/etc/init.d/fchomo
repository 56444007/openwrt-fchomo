#!/bin/sh /etc/rc.common

. "${IPKG_INSTROOT}/lib/functions/network.sh"

USE_PROCD=1

START=99
STOP=10

CONF="fchomo"
PROG="/usr/bin/mihomo"

HM_DIR="/etc/fchomo"
TEMPS_DIR="$HM_DIR/templates"
RUN_DIR="/var/run/fchomo"
LOG_PATH="$RUN_DIR/fchomo.log"
DNSMASQ_DIR="/tmp/dnsmasq.d/dnsmasq-fchomo.d"

config_load "$CONF"

log() {
	echo -e "$(date "+%Y-%m-%d %H:%M:%S") [DAEMON] $*" >> "$LOG_PATH"
}

start_service() {
	local default_proxy
	config_get default_proxy "client" "default_proxy" ""

	local server_enabled
	config_get_bool server_enabled "server" "enabled" "0"

	if [ -z "$default_proxy" ] && [ "$server_enabled" = "0" ]; then
		return 1
	fi

	mkdir -p "$RUN_DIR"

	# Client
	if [ -n "$default_proxy" ]; then
	if [ -z "$1" -o "$1" = "mihomo-c" ]; then
		# Generate/Validate client config
		ucode -S "$HM_DIR/scripts/generate_client.uc" 2>>"$LOG_PATH" | yq -Poy | yq \
			'.sniffer["force-domain"][] style="double"
			| .sniffer["skip-domain"][] style="double"
			| with(.dns["nameserver-policy"] | keys; .. style="double")
			| .dns["fallback-filter"].domain[] style="double"' \
		> "$RUN_DIR/mihomo-c.yaml"
		yq eval-all -i '. as $item ireduce ({}; . * $item )' "$RUN_DIR/mihomo-c.yaml" "$TEMPS_DIR/"*.yaml

		if [ ! -e "$RUN_DIR/mihomo-c.yaml" ]; then
			log "Error: failed to generate client configuration."
			return 1
		elif ! "$PROG" -t -d "$HM_DIR" -f "$RUN_DIR/mihomo-c.yaml" 2>>"$LOG_PATH"; then
			log "Error: wrong client configuration detected."
			return 1
		fi
		echo > "$RUN_DIR/mihomo-c.log"

		# Deploy Clash API Dashboard
		local dashboard_repo
		config_get dashboard_repo "api" "dashboard_repo" ""

		if [ -n "$dashboard_repo" ]; then
			rm -rf "$RUN_DIR/ui"
			tar -xzf "$HM_DIR/resources/$(echo "$dashboard_repo" | sed 's|\W|_|g').tgz" -C "$RUN_DIR/"
			mv "$RUN_DIR/"*-gh-pages/ "$RUN_DIR/ui/"
		fi
	fi
	fi

	# Server
	if [ "$server_enabled" = "1" ]; then
	if [ -z "$1" -o "$1" = "mihomo-s" ]; then
		echo > "$RUN_DIR/mihomo-s.log"
	fi
	fi

	# log-cleaner
	procd_open_instance "log-cleaner"
	procd_set_param command "$HM_DIR/scripts/clean_log.sh"
	procd_set_param respawn
	procd_close_instance

	log "$(mihomo -v | awk 'NR==1{print $1,$3}') started."
}

stop_service() {
	# Client
	[ -z "$1" -o "$1" = "mihomo-c" ] && stop_client
	# Server
	[ -z "$1" -o "$1" = "mihomo-s" ] && stop_server
	return 0
}

stop_client() {
	rm -f "$RUN_DIR/mihomo-c.yaml" "$RUN_DIR/mihomo-c.log"

	log "Service mihomo-c stopped."
}

stop_server() {
	rm -f "$RUN_DIR/mihomo-s.yaml" "$RUN_DIR/mihomo-s.log"

	log "Service mihomo-s stopped."
}

service_stopped() {
	# Client
	[ -n "$(/etc/init.d/$CONF info | jsonfilter -q -e '@.'"$CONF"'.instances["mihomo-c"]')" ] || client_stopped
	# Server
	return 0
}

client_stopped() {
	return 0
}

server_stopped() {
	return 0
}

reload_service() {
	log "Reloading service${1:+ $1}..."

	stop  "$@"
	start "$@"
}
